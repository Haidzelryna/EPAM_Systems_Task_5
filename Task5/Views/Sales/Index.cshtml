@using DevExtreme.AspNet.Mvc

@model IEnumerable<BLL.Sale>

@{
    ViewBag.Title = "Sales";
}

<h2>Sales List</h2>


<script src="https://unpkg.com/devextreme-aspnet-data/js/dx.aspnet.data.js"></script>

@*@Scripts.Render("~/bundles/jquery")*@


@*<script type="text/javascript" src="~/Scripts/aspnet/dx.aspnet.mvc.js"></script>
    <script type="text/javascript" src="~/Scripts/aspnet/dx.aspnet.data.js"></script>*@

@*@Scripts.Render("~/Scripts/dx.viz.js")*@

@*@{scriptBundle
    .Include("~/Scripts/dx.viz.js")
    .Include("~/Scripts/aspnet/dx.aspnet.data.js")
    .Include("~/Scripts/aspnet/dx.aspnet.mvc.js"); }*@

@(Html.DevExtreme().DataGrid<BLL.Sale>
                                    ()
                                    .ID("gridContainerSales")

                                    .DataSource(d => d.Mvc().Controller("SalesMVC").Key("Id")
                                        .LoadAction("Get")
                                        .InsertAction("Post")
                                        .UpdateAction("Put"))

                                    .RemoteOperations(true)

                                    .ShowBorders(true)

                                    .Selection(s => s.Mode(SelectionMode.Single))

                                    .Editing(e => e
                                    .Mode(GridEditMode.Batch)
                                    .AllowAdding(true)
                                    .AllowDeleting(true)
                                    .AllowUpdating(true))

                                    .SearchPanel(searchPanel => searchPanel
                                    .Visible(true)
                                    .Width(240)
                                    .Placeholder("Search..."))

                                    .Paging(p => p.PageSize(10))

                                    .Pager(p => p
                                    .ShowPageSizeSelector(true)
                                    .AllowedPageSizes(new[] { 10, 25, 50, 100 }))

                                    .HeaderFilter(headerFilter => headerFilter.Visible(true))

                                     .FilterPanel(filterPanel => filterPanel.Visible(true))

                                    .FilterRow(filterRow => filterRow
                                    .Visible(true)
                                    .ApplyFilter(GridApplyFilterMode.Auto))

                                    .AllowColumnReordering(true)
                                    .AllowColumnResizing(true)
                                    .ColumnAutoWidth(true)
                                    .ShowBorders(true)
                                    .ColumnChooser(c => c.Enabled(true))
                                    .ColumnFixing(c => c.Enabled(true))

                                    .Columns(columns =>
                                    {
                                        columns.Add()
                                          .DataField("Date")
                                          .DataType(GridColumnDataType.Date);
                                        columns.AddFor(m => m.ClientName);
                                        columns.AddFor(m => m.ProductName);
                                        columns.AddFor(m => m.Sum);
                                        columns.Add()
                                            .DataField("Client.Id")
                                            .Caption("Client")
                                            .Width(125)
                                            .Lookup(lookup => lookup
                                            .DataSource(d => d.Mvc().Controller("ClientsMVC").Key("Id").LoadAction("Get"))
                                            .DisplayExpr("Name")
                                            .ValueExpr("Id"));
                                        columns.Add()
                                            .DataField("Product.Id")
                                            .Caption("Product")
                                            .Width(125)
                                            .Lookup(lookup => lookup
                                            .DataSource(d => d.Mvc().Controller("ProductsMVC").Key("Id").LoadAction("Get"))
                                            .DisplayExpr("Name")
                                            .ValueExpr("Id"));
                                        columns.Add()
                                           .DataField("Manager.Id")
                                           .Caption("Manager")
                                           .Width(125)
                                           .Lookup(lookup => lookup
                                           .DataSource(d => d.Mvc().Controller("ManagersMVC").Key("Id").LoadAction("Get"))
                                           .DisplayExpr("Name")
                                           .ValueExpr("Id"));
                                    })



     @*.columns: [{
                dataField: "CustomerID",
                caption: "Customer",
                validationRules: [{
                    type: "stringLength",
                    message: "The field Customer must be a string with a maximum length of 5.",
                    max: 5
                }],
                lookup: {
                    dataSource: DevExpress.data.AspNet.createStore({
                        key: "Value",
                        loadUrl: url + "/CustomersLookup",
                        onBeforeSend: function(method, ajaxOptions)
        {
            ajaxOptions.xhrFields = { withCredentials: true };
        }
    }),
                    valueExpr: "Value",
                    displayExpr: "Text"
                }
            }, { 
                dataField: "OrderDate",
                dataType: "date",
                validationRules: [{
                    type: "required",
                    message: "The OrderDate field is required."
                }]
            }, { 
                dataField: "Freight",
                headerFilter: {
                    groupInterval: 100
                },
                validationRules: [{
                    type: "range",
                    message: "The field Freight must be between 0 and 2000.",
                    min: 0,
                    max: 2000
                }]
            }, {
                dataField: "ShipCountry",
                validationRules: [{
                    type: "stringLength",
                    message: "The field ShipCountry must be a string with a maximum length of 15.",
                    max: 15
                }]
            }, {
                dataField: "ShipVia",
                caption: "Shipping Company",
                dataType: "number",
                lookup: {
                    dataSource: DevExpress.data.AspNet.createStore({
                        key: "Value",
                        loadUrl: url + "/ShippersLookup",
                        onBeforeSend: function(method, ajaxOptions)
    {
        ajaxOptions.xhrFields = { withCredentials: true };
    }
                    }),
                    valueExpr: "Value",
                    displayExpr: "Text"
                }
            }
        ]*@
)

@(Html.DevExtreme().Button()
                                        .Text("Refresh Grid")
                                        .OnClick("reloadData")
    )

    <script type="text/javascript">
        function reloadData() {
            $("#gridContainerSales").dxDataGrid("getDataSource").reload();
        }
    </script>




